package com.company.project.EndersOverFlow.controller;

import org.slf4j.Logger; 
import org.slf4j.LoggerFactory; 
import org.springframework.beans.factory.annotation.Autowired; 
import org.springframework.http.HttpStatus; 
import org.springframework.http.MediaType; 
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import com.company.project.EndersOverFlow.model.Member;

import javax.servlet.http.HttpServletRequest; 
import java.util.List; 
import java.util.Optional; 

@RestController 
@RequestMapping("memberTest")
public class MemberController { 
	// 기본형 
	private final Logger logger = LoggerFactory.getLogger(this.getClass()); 
	@Autowired com.company.project.EndersOverFlow.service.MemberService memberService; 
	// 모든 회원 조회 
	@GetMapping(produces = { MediaType.APPLICATION_JSON_VALUE }) 
	public ResponseEntity<List<Member>> getAllmembers() { 
		List<Member> member = memberService.findAll(); 
		return new ResponseEntity<List<Member>>(member, HttpStatus.OK); 
	} 
	// 회원번호로 한명의 회원 조회 
	@GetMapping(value = "/{mbrNo}", produces = { MediaType.APPLICATION_JSON_VALUE }) 
	public ResponseEntity<Member> getMember(@PathVariable("mbrNo") Long mbrNo) { 
		Optional<Member> member = memberService.findById(mbrNo); 
		return new ResponseEntity<Member>(member.get(), HttpStatus.OK); 
	} 
	// 회원번호로 회원 삭제 
	@DeleteMapping(value = "/{mbrNo}", produces = { MediaType.APPLICATION_JSON_VALUE }) 
	public ResponseEntity<Void> deleteMember(@PathVariable("mbrNo") Long mbrNo) { 
		memberService.deleteById(mbrNo); 
		return new ResponseEntity<Void>(HttpStatus.NO_CONTENT); 
	} 
	// 회원번호로 회원 수정(mbrNo로 회원을 찾아 Member 객체의 id, name로 수정함) 
	@PutMapping(value = "/{mbrNo}", produces = { MediaType.APPLICATION_JSON_VALUE }) 
	public ResponseEntity<Member> updateMember(@PathVariable("mbrNo") Long mbrNo, Member member) { 
		memberService.updateById(mbrNo, member); return new ResponseEntity<Member>(member, HttpStatus.OK); 
	} 
	// 회원 입력 
	// POSTMAN에서 테스트 해보면 알 수 있다.
//	@RequestMapping(value = "/postMethods", method= {RequestMethod.POST})
	@PostMapping
	@ResponseBody
	public ResponseEntity<Member> save(@RequestBody Member member, HttpServletRequest httpServletRequest) { 
		System.out.println("넘어온 맴버 정보좀 보자");
        System.out.println("RequestMethod.POST");
		System.out.println(member);
		HttpHeaders requestHeaders = new HttpHeaders();
		requestHeaders.setContentType(new MediaType("application","json;charset=utf-8"));
        String id = httpServletRequest.getParameter("id");
        String id1 = httpServletRequest.getParameter("mbr_id");
        String id2 = httpServletRequest.getParameter("MBR_ID");
		System.out.println(id);
		System.out.println(id1);
		System.out.println(id2);
		return new ResponseEntity<Member>(memberService.save(member), HttpStatus.OK); 
	} 
	// 회원 입력 
	@RequestMapping(value="/saveMember", method = RequestMethod.GET) 
	public ResponseEntity<Member> save(HttpServletRequest req, Member member){ 
		return new ResponseEntity<Member>(memberService.save(member), HttpStatus.OK); 
	} 
}

